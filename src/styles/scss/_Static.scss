/* STATIC CLASSES */

// LAYOUT

// Aspect Ratio

$list__aspectRatio: (
	'square': 1/1,
	'portrait': 3/4,
	'landscape': 4/3,
	'widescreen': 16/9,
	'vertical': 9/16,
	'ultrawide': 21/9,
);

@each $key, $value in $list__aspectRatio {
	.aspect__#{$key} {
		aspect-ratio: $value;
	}
}

// Columns

$list__columnsCount: (1, 2, 3, 4, 5);

@each $column in $list__columnsCount {
	.col__#{$column} {
		columns: $column;
	}
}

// Breaks

$list__breaks-in-out: (auto, avoid, all, avoid-page, page, left, right, recto, verso);

@each $break in $list__breaks-in-out {
	.break__inside-#{$break} {
		break-inside: $break;
	}
	.break__outside-#{$break} {
		break-outside: $break;
	}
}

$list__breaks-inside: (auto, avoid, avoid-page, avoid-column);

@each $break in $list__breaks-inside {
	.break__inside-#{$break} {
		break-inside: $break;
	}
}

$list__break-box-decoration: (slice, clone);

@each $break in $list__break-box-decoration {
	.break__box-decoration-#{$break} {
		box-decoration-break: $break;
	}
}

// Box Model

$list__box-sizing: (border-box, content-box);

@each $box in $list__box-sizing {
	.box__#{$box} {
		box-sizing: $box;
	}
}

// Display

$list__display: (block, inline, inline-block, flex, grid, inline-flex, inline-grid, none, table, table-row, table-cell, table-column, table-column-group, table-footer-group, table-header-group, table-row-group, flow-root, contents, list-item, ruby, ruby-base, ruby-text, run-in, subgrid);

@each $display in $list__display {
	.display__#{$display} {
		display: $display;
	}
}

// Floats

$list__floats: (inline-start, inline-end, left, right, none);

@each $float in $list__floats {
	.float__#{$float} {
		float: $float;
	}
}

// Clear

$list__clear: (inline-start, inline-end, left, right, both, none);

@each $clear in $list__clear {
	.clear__#{$clear} {
		clear: $clear;
	}
}

// Isolation

$list__isolation: (auto, isolate);

@each $isolation in $list__isolation {
	.isolation__#{$isolation} {
		isolation: $isolation;
	}
}

// Object Fit

$list__object-fit: (fill, contain, cover, none, scale-down);

@each $fit in $list__object-fit {
	.fit__#{$fit} {
		object-fit: $fit;
	}
}

// Object Position

$list__object-possition: (top, bottom, left, right, center, top-left, top-right, bottom-left, bottom-right);

@each $position in $list__object-possition {
	.position__#{$position} {
		object-position: $position;
	}
}

// Overflow

$list__overflow: (visible, hidden, scroll, auto);

@each $overflow in $list__overflow {
	.overflow__#{$overflow} {
		overflow: $overflow;
	}
	.overflow__x-#{$overflow} {
		overflow-x: $overflow;
	}
	.overflow__y-#{$overflow} {
		overflow-y: $overflow;
	}
}

// Overscroll Behavior -- Not supported in Safari

$list__overscroll: (auto, contain, none);

@each $overscroll in $list__overscroll {
	.overscroll__#{$overscroll} {
		overscroll-behavior: $overscroll;
	}
	.overscroll__x-#{$overscroll} {
		overscroll-behavior-x: $overscroll;
	}
	.overscroll__y-#{$overscroll} {
		overscroll-behavior-y: $overscroll;
	}
}

// Position

$list__position: (static, relative, absolute, fixed, sticky);

@each $position in $list__position {
	.position__#{$position} {
		position: $position;
	}
}

// Top Right Bottom Left

$list__top-right-bottom-left: (auto, 0);

@each $value in $list__top-right-bottom-left {
	.position__top-#{$value} {
		top: $value;
	}
	.position__right-#{$value} {
		right: $value;
	}
	.position__bottom-#{$value} {
		bottom: $value;
	}
	.position__left-#{$value} {
		left: $value;
	}
}

// Visibility

$list__visibility: (visible, hidden, collapse);

@each $visibility in $list__visibility {
	.visibility__#{$visibility} {
		visibility: $visibility;
	}
}

// Z-Index

$list__z-index: (auto, 0, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000);

@each $index in $list__z-index {
	.index__#{$index} {
		z-index: $index;
	}
}

/* FLEXBOX & GRID */

// Flex Basis

// Flex Direction

$list__flex-direction: (row, row-reverse, column, column-reverse);

@each $direction in $list__flex-direction {
	.flex__direction-#{$direction} {
		flex-direction: $direction;
	}
}

// Flex Wrap

$list__flex-wrap: (nowrap, wrap, wrap-reverse);

@each $wrap in $list__flex-wrap {
	.flex__wrap-#{$wrap} {
		flex-wrap: $wrap;
	}
}

// Flex Grow

$list__flex-grow: (0, 1);

@each $grow in $list__flex-grow {
	.flex__grow-#{$grow} {
		flex-grow: $grow;
	}
}

// Flex Shrink

$list__flex-shrink: (0, 1);

@each $shrink in $list__flex-shrink {
	.flex__shrink-#{$shrink} {
		flex-shrink: $shrink;
	}
}

// Flex

$list__flex: (0, 1, auto);

@each $flex in $list__flex {
	.flex__#{$flex} {
		flex: $flex;
	}
}

// Grid Columns

$list__grid-columns: (auto, 1fr, 2fr, 3fr, 4fr, 5fr, 6fr, 7fr, 8fr, 9fr, 10fr, 11fr, 12fr, 13fr, 14fr, 15fr, 16fr, 17fr, 18fr, 19fr, 20fr, 21fr, 22fr, 23fr, 24fr);

@each $column in $list__grid-columns {
	.grid__column-#{$column} {
		grid-template-columns: repeat(auto-fill, minmax($column, 1fr));
	}
}

// Grid Auto Flow

$list__grid-auto-flow: (row, column, row dense, column dense);

@each $flow in $list__grid-auto-flow {
	.grid__auto-flow-#{$flow} {
		grid-auto-flow: $flow;
	}
}

// Grid Auto Columns

$list__grid-auto-columns: (auto, 1fr, 2fr, 3fr, 4fr, 5fr, 6fr, 7fr, 8fr, 9fr, 10fr, 11fr, 12fr, 13fr, 14fr, 15fr, 16fr, 17fr, 18fr, 19fr, 20fr, 21fr, 22fr, 23fr, 24fr);

@each $column in $list__grid-auto-columns {
	.grid__auto-column-#{$column} {
		grid-auto-columns: repeat(auto-fill, minmax($column, 1fr));
	}
}

// Grid Auto Rows

$list__grid-auto-rows: (auto, 1fr, 2fr, 3fr, 4fr, 5fr, 6fr, 7fr, 8fr, 9fr, 10fr, 11fr, 12fr, 13fr, 14fr, 15fr, 16fr, 17fr, 18fr, 19fr, 20fr, 21fr, 22fr, 23fr, 24fr);

@each $row in $list__grid-auto-rows {
	.grid__auto-row-#{$row} {
		grid-auto-rows: repeat(auto-fill, minmax($row, 1fr));
	}
}

// Grid Rows

	.grid__auto-row-#{$row} {
		grid-auto-rows: repeat(auto-fill, minmax($row, 1fr));
	}
}


//grid rows

$list__grid-rows: (auto, 1fr, 2fr, 3fr, 4fr, 5fr, 6fr, 7fr, 8fr, 9fr, 10fr, 11fr, 12fr, 13fr, 14fr, 15fr, 16fr, 17fr, 18fr, 19fr, 20fr, 21fr, 22fr, 23fr, 24fr);

@each $row in $list__grid-rows {
	.grid__row-#{$row} {
		grid-template-rows: repeat(auto-fill, minmax($row, 1fr));
	}
}

//justify-content

$list__justify-content: (flex-start, flex-end, center, space-between, space-around, space-evenly, start, end, left, right);

@each $justify in $list__justify-content {
	.justify__#{$justify} {
		justify-content: $justify;
	}
}

//justify items

$list__justify-items: (start, end, center, stretch);

@each $justify in $list__justify-items {
	.justify__items-#{$justify} {
		justify-items: $justify;
	}
}

//justify self

$list__justify-self: (auto, start, end, center, stretch);

@each $justify in $list__justify-self {
	.justify__self-#{$justify} {
		justify-self: $justify;
	}
}

//align-content

$list__align-content: (flex-start, flex-end, center, space-between, space-around, space-evenly, stretch, start, end);

@each $align in $list__align-content {
	.align__content-#{$align} {
		align-content: $align;
	}
}

//align items

$list__align-items: (stretch, flex-start, flex-end, center, baseline);

@each $align in $list__align-items {
	.align__items-#{$align} {
		align-items: $align;
	}
}

//align self

$list__align-self: (auto, stretch, flex-start, flex-end, center, baseline);

@each $align in $list__align-self {
	.align__self-#{$align} {
		align-self: $align;
	}
}

//place content

$list__place-content: (stretch, center, start, end, flex-start, flex-end, space-between, space-around, space-evenly);

@each $place in $list__place-content {
	.place__content-#{$place} {
		place-content: $place;
	}
}

//place items

$list__place-items: (stretch, center, start, end, flex-start, flex-end, baseline);

@each $place in $list__place-items {
	.place__items-#{$place} {
		place-items: $place;
	}
}

//place self

$list__place-self: (auto, stretch, center, start, end, flex-start, flex-end, baseline);

@each $place in $list__place-self {
	.place__self-#{$place} {
		place-self: $place;
	}
}

//font smoothing 

$list__font-smoothing: (auto, none, antialiased, subpixel-antialiased);

@each $smoothing in $list__font-smoothing {
	.font__smoothing-#{$smoothing} {
		-webkit-font-smoothing: $smoothing;
		-moz-osx-font-smoothing: $smoothing;
	}
}

//font style

$list__font-style: (normal, italic, oblique);

@each $style in $list__font-style {
	.font__style-#{$style} {
		font-style: $style;
	}
}

//font weight

$list__font-weight: (normal, bold, bolder, lighter, 100, 200, 300, 400, 500, 600, 700, 800, 900);

@each $weight in $list__font-weight {
	.font__weight-#{$weight} {
		font-weight: $weight;
	}
}

//list style

$list__list-style: (none, disc, circle, square, decimal, decimal-leading-zero, lower-roman, upper-roman, lower-greek, lower-latin, upper-latin, armenian, georgian, lower-alpha, upper-alpha, none);

@each $style in $list__list-style {
	.list__style-#{$style} {
		list-style: $style;
	}
}


//list style position

$list__list-style-position: (inside, outside);

@each $position in $list__list-style-position {
	.list__style-position-#{$position} {
		list-style-position: $position;
	}
}

//list style type

$list__list-style-type: (none, disc, circle, square, decimal, decimal-leading-zero, lower-roman, upper-roman, lower-greek, lower-latin, upper-latin, armenian, georgian, lower-alpha, upper-alpha, none);

@each $type in $list__list-style-type {
	.list__style-type-#{$type} {
		list-style-type: $type;
	}
}

//text align

$list__text-align: (left, right, center, justify, start, end, match-parent);

@each $align in $list__text-align {
	.align__#{$align} {
		text-align: $align;
	}
}

//text decoration

$list__text-decoration: (none, underline, overline, line-through, blink);	

@each $decoration in $list__text-decoration {
	.decoration__#{$decoration} {
		text-decoration: $decoration;
	}
}

//text decoration

$list__text-decoration: (none, underline, overline, line-through, blink);

@each $decoration in $list__text-decoration {
	.decoration__#{$decoration} {
		text-decoration: $decoration;
	}
}

//text decoration thickness

$list__text-decoration-thickness: (auto, from-font, 0, 1px, 2px, 3px, 4px, 5px);

@each $thickness in $list__text-decoration-thickness {
	.thickness__#{$thickness} {
		text-decoration-thickness: $thickness;
	}
}

//text decoration style

$list__text-decoration-style: (solid, double, dotted, dashed, wavy);

@each $style in $list__text-decoration-style {
	.style__#{$style} {
		text-decoration-style: $style;
	}
}

//text Underline offset

$list__text-underline-offset: (auto, from-font, 0, 1px, 2px, 3px, 4px, 5px);

@each $offset in $list__text-underline-offset {
	.offset__#{$offset} {
		text-underline-offset: $offset;
	}
}

//text transform

$list__text-transform: (none, capitalize, uppercase, lowercase);

@each $transform in $list__text-transform {
	.transform__#{$transform} {
		text-transform: $transform;
	}
}

//text overflow

$list__text-overflow: (clip, ellipsis);

@each $overflow in $list__text-overflow {
	.overflow__#{$overflow} {
		text-overflow: $overflow;
	}
}

//text wrap 

$list__text-wrap: (wrap, nowrap, pretty, balance, stable);

@each $wrap in $list__text-wrap {
	.wrap__#{$wrap} {
		overflow-wrap: $wrap;
	}
}	

//vertical align

$list__vertical-align: (baseline, sub, super, text-top, text-bottom, middle, top, bottom);

@each $align in $list__vertical-align {
	.align__#{$align} {
		vertical-align: $align;
	}
}

//white space

$list__white-space: (normal, nowrap, pre, pre-line, pre-wrap, break-spaces);

@each $space in $list__white-space {
	.space__#{$space} {
		white-space: $space;
	}
}

// word break

$list__word-break: (normal, break-all, keep-all, break-word);

@each $break in $list__word-break {
	.break__#{$break} {
		word-break: $break;
	}
}

//hypens

$list__hyphens: (manual, auto, none);

@each $hyphen in $list__hyphens {
	.hyphen__#{$hyphen} {
		hyphens: $hyphen;
	}
}



/* BACKGROUND */

//background attachment

$list__background-attachment: (scroll, fixed, local);

@each $attachment in $list__background-attachment {
	.attachment__#{$attachment} {
		background-attachment: $attachment;
	}
}

//background clip

$list__background-clip: (border-box, padding-box, content-box, text);

@each $clip in $list__background-clip {
	.clip__#{$clip} {
		background-clip: $clip;
	}
}

//background color

$list__background-color: (transparent, currentColor);

@each $color in $list__background-color {
	.color__#{$color} {
		background-color: $color;
	}
}

//background origin

$list__background-origin: (border-box, padding-box, content-box);

@each $origin in $list__background-origin {
	.origin__#{$origin} {
		background-origin: $origin;
	}
}

//background position

$list__background-position: (top, bottom, left, right, center);

@each $position in $list__background-position {
	.position__#{$position} {
		background-position: $position;
	}
}

//background repeat

$list__background-repeat: (repeat, repeat-x, repeat-y, no-repeat, space, round);

@each $repeat in $list__background-repeat {
	.repeat__#{$repeat} {
		background-repeat: $repeat;
	}
}

//background size

$list__background-size: (auto, cover, contain);

@each $size in $list__background-size {
	.size__#{$size} {
		background-size: $size;
	}
}


/* BORDER */

//border style

$list__border-style: (none, hidden, dotted, dashed, solid, double, groove, ridge, inset, outset);

@each $style in $list__border-style {
	.style__#{$style} {
		border-style: $style;
	}
}

//border collapse

$list__border-collapse: (collapse, separate);

@each $collapse in $list__border-collapse {
	.collapse__#{$collapse} {
		border-collapse: $collapse;
	}
}

//border radius + width

$list__border-props: (0, 1px, 2px, 3px, 4px, 5px, 6px, 7px, 8px, 9px, 10px, 11px, 12px, 13px, 14px, 15px, 16px, 17px, 18px, 19px, 20px, 21px, 22px, 23px, 24px, 25px, 26px, 27px, 28px, 29px, 30px, 31px, 32px, 33px, 34px, 35px, 36px, 37px, 38px, 39px, 40px, 41px, 42px, 43px, 44px, 45px, 46px, 47px, 48px, 49px, 50px);

@each $prop in $list__border-props {
	.radius__#{$prop} {
		border-radius: $prop;
	}
}

@each $prop in $list__border-props {
	.width__#{$prop} {
		border-width: $prop;
	}
}

//border color

$list__border-color: (transparent, currentColor);

@each $color in $list__border-color {
	.color__#{$color} {
		border-color: $color;
	}
}

//divide

$list__divide: (x, y);

@each $divide in $list__divide {
	.divide__#{$divide} {
		divide: $divide;
	}
}

//divide color

$list__divide-color: (transparent, currentColor);

@each $color in $list__divide-color {
	.color__#{$color} {
		divide-color: $color;
	}
}

//divide style

$list__divide-style: (solid, dashed, dotted, double, none);

@each $style in $list__divide-style {
	.style__#{$style} {
		divide-style: $style;
	}
}

//divide width


@each $prop in $list__border-props {
	.width__#{$prop} {
		divide-width: $prop;
	}
}

//filters

$list__filter: (none, blur, brightness, contrast, drop-shadow, grayscale, hue-rotate, invert, opacity, saturate, sepia);

@each $filter in $list__filter {
	.filter__#{$filter} {
		filter: $filter;
	}
}

//backdrop filter

$list__backdrop-filter: (none, blur, brightness, contrast, drop-shadow, grayscale, hue-rotate, invert, opacity, saturate, sepia);

@each $filter in $list__backdrop-filter {
	.filter__#{$filter} {
		backdrop-filter: $filter;
	}
}

/* Tables */

//border collapse

$list__border-collapse: (collapse, separate);

@each $collapse in $list__border-collapse {
	.collapse__#{$collapse} {
		border-collapse: $collapse;
	}
}

//table layout

$list__table-layout: (auto, fixed);

@each $layout in $list__table-layout {
	.layout__#{$layout} {
		table-layout: $layout;
	}
}

//caption side

$list__caption-side: (top, bottom);

@each $side in $list__caption-side {
	.side__#{$side} {
		caption-side: $side;
	}
}

//empty cells

$list__empty-cells: (show, hide);

@each $cell in $list__empty-cells {
	.cell__#{$cell} {
		empty-cells: $cell;
	}
}

/* transforms */

//scale

$list__scale: (0, 1, 2, 3, 4, 5);

@each $scale in $list__scale {
	.scale__#{$scale} {
		transform: scale($scale);
	}
}

//rotate

$list__rotate: (0, 45deg, 90deg, 135deg, 180deg, 225deg, 270deg, 315deg);

@each $rotate in $list__rotate {
	.rotate__#{$rotate} {
		transform: rotate($rotate);
	}
}

//translate

$list__translate: (0, 1px, 2px, 3px, 4px, 5px, 6px, 7px, 8px, 9px, 10px, 11px, 12px, 13px, 14px, 15px, 16px, 17px, 18px, 19px, 20px, 21px, 22px, 23px, 24px, 25px, 26px, 27px, 28px, 29px, 30px, 31px, 32px, 33px, 34px, 35px, 36px, 37px, 38px, 39px, 40px, 41px, 42px, 43px, 44px, 45px, 46px, 47px, 48px, 49px, 50px);


@each $translate in $list__translate {
	.translate__#{$translate} {
		transform: translate($translate);
	}
}

//skew

$list__skew: (0, 1deg, 2deg, 3deg, 4deg, 5deg, 6deg, 7deg, 8deg, 9deg, 10deg, 11deg, 12deg, 13deg, 14deg, 15deg, 16deg, 17deg, 18deg, 19deg, 20deg, 21deg, 22deg, 23deg, 24deg, 25deg, 26deg, 27deg, 28deg, 29deg, 30deg, 31deg, 32deg, 33deg, 34deg, 35deg, 36deg, 37deg, 38deg, 39deg, 40deg, 41deg, 42deg, 43deg, 44deg, 45deg, 46deg, 47deg, 48deg, 49deg, 50deg);

@each $skew in $list__skew {
	.skew__#{$skew} {
		transform: skew($skew);
	}
}

//transform origin

$list__transform-origin: (top, bottom, left, right, center);

@each $origin in $list__transform-origin {
	.origin__#{$origin} {
		transform-origin: $origin;
	}
}

//perspective

$list__perspective: (none, 1px, 2px, 3px, 4px, 5px, 6px, 7px, 8px, 9px, 10px, 11px, 12px, 13px, 14px, 15px, 16px, 17px, 18px, 19px, 20px, 21px, 22px, 23px, 24px, 25px, 26px, 27px, 28px, 29px, 30px, 31px, 32px, 33px, 34px, 35px, 36px, 37px, 38px, 39px, 40px, 41px, 42px, 43px, 44px, 45px, 46px, 47px, 48px, 49px, 50px);

@each $perspective in $list__perspective {
	.perspective__#{$perspective} {
		perspective: $perspective;
	}
}

//perspective origin

$list__perspective-origin: (top, bottom, left, right, center);

@each $origin in $list__perspective-origin {
	.origin__#{$origin} {
		perspective-origin: $origin;
	}
}

//transform style

$list__transform-style: (flat, preserve-3d);

@each $style in $list__transform-style {
	.style__#{$style} {
		transform-style: $style;
	}
}

//backface visibility

$list__backface-visibility: (visible, hidden);

@each $visibility in $list__backface-visibility {
	.visibility__#{$visibility} {
		backface-visibility: $visibility;
	}
}

//transition property

$list__transition-property: (all, none);

@each $property in $list__transition-property {
	.property__#{$property} {
		transition-property: $property;
	}
}

//transition duration

$list__transition-duration: (0, 100ms, 200ms, 300ms, 400ms, 500ms, 600ms, 700ms, 800ms, 900ms, 1s, 2s, 3s, 4s, 5s);

@each $duration in $list__transition-duration {
	.duration__#{$duration} {
		transition-duration: $duration;
	}
}

//transition timing function

$list__transition-timing: (ease, linear, ease-in, ease-out, ease-in-out, step-start, step-end, steps, cubic-bezier);

@each $timing in $list__transition-timing {
	.timing__#{$timing} {
		transition-timing-function: $timing;
	}
}

//transition delay

$list__transition-delay: (0, 100ms, 200ms, 300ms, 400ms, 500ms, 600ms, 700ms, 800ms, 900ms, 1s, 2s, 3s, 4s, 5s);


@each $delay in $list__transition-delay {
	.delay__#{$delay} {
		transition-delay: $delay;
	}
}


/* Interactivity */

//appearance

$list__appearance: (none, auto);

@each $appearance in $list__appearance {
	.appearance__#{$appearance} {
		appearance: $appearance;
	}
}

//cursor

$list__cursor: (auto, default, none, context-menu, help, pointer, progress, wait, cell, crosshair, text, vertical-text, alias, copy, move, no-drop, not-allowed, grab, grabbing, all-scroll, col-resize, row-resize, n-resize, e-resize, s-resize, w-resize, ne-resize, nw-resize, se-resize, sw-resize, ew-resize, ns-resize, nesw-resize, nwse-resize, zoom-in, zoom-out);

@each $cursor in $list__cursor {
	.cursor__#{$cursor} {
		cursor: $cursor;
	}
}

//outline

$list__outline: (none, auto);

@each $outline in $list__outline {
	.outline__#{$outline} {
		outline: $outline;
	}
}

//pointer events

$list__pointer-events: (auto, none);

@each $events in $list__pointer-events {
	.events__#{$events} {
		pointer-events: $events;
	}
}

//resize

$list__resize: (none, both, horizontal, vertical);

@each $resize in $list__resize {
	.resize__#{$resize} {
		resize: $resize;
	}
}

//user select

$list__user-select: (auto, none, text, all, contain, inherit);

@each $select in $list__user-select {
	.select__#{$select} {
		user-select: $select;
	}
}

//appearance

$list__appearance: (none, auto);

@each $appearance in $list__appearance {
	.appearance__#{$appearance} {
		appearance: $appearance;
	}
}

//caret color

$list__caret-color: (auto, currentColor);

@each $color in $list__caret-color {
	.color__#{$color} {
		caret-color: $color;
	}
} 

